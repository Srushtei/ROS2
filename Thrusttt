
<!DOCTYPE html>
<html>
<head>
    <title>Thrust Rig</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" type="text/css" href="styles.css">
    
            <style>

.container {
            border: 1px solid #ccc;
            padding: 10px;
            width:70%;
            height:50%;
            background-color: #f0f0f0;
            position: fixed;
            top: 50%;
            right: auto;
            transform: translate(0, -50%);
        }

    body {
        font-family: Arial, sans-serif;
    }

    .slide {
        background-color: lightblue;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin: 20px;
        background-image: url("https://imgur.com/z7XgpjL"); /* Replace 'your-image.jpg' with the image file or URL */
        background-size: cover; /* Cover the entire viewport */
        background-position: center; /* Center the background image */
        background-repeat: no-repeat; /* Prevent repeating the image */
    }

    h1, h2, h3 {
        color: #333;
    }

    input[type="text"] {
        padding: 10px;
        border: 1px solid #aaa;
        border-radius: 5px;
    }

    button {
        padding: 5px 10px;
        font-size: 14px;
        background-color: black; /* black color */
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    button:hover {
        background-color: #5F9EA0; /* Lighter shade of blue on hover */
    }

    #liveChart {
        background-color: #fff;
    
        body {
            display: flex;
            justify-content: space-between;
        }

                     
    }
    
</style>

</head>
<body>
    <div class="slide" id="slide1">
        <h1>Thrust Rig</h1>
        <p>Enter your name:</p>
        <form id="userForm">
            <input type="text" name="user_name" id="user_name" placeholder="Your Name" required>
            <p>Enter Motor name:</p>
            <input type="text" name="motor_name" id="motor_name" placeholder="Motor Name" required>
            <p>Enter Prop size:</p>
            <input type="text" name="prop_size" id="prop_size" placeholder="Prop Size" required>
            <p>Enter ESC name:</p>
            <input type="text" name="esc_rating" id="esc_rating" placeholder="ESC Rating" required>
            <p>Enter Battery ID:</p>
            <input type="text" name="battery_id" id="battery_id" placeholder="Battery ID" required>
            <p>
                <button type="button" id="store-button" onclick="storeDataToCSV()">Store</button>
                <button id="next1">Next</button>
                
             <button id="viewLogs" style="position: absolute; top: 10px; right: 10px;">View Previous Logs</button>
            </p>
        </form>
    </div>

    <div class="slide" id="slide2" style="display: none;">
        <h2>Calibration Slide</h2>
        <button id="calibrate" onclick="serialConnect()">Calibrate</button>
        <p id="dynamic-paragraph"></p>
        <p>
        <p1>Press enter to save the Throtle value to CSV</p1>
        <p>
        <input id="throttle_input" type="number" placeholder="Throttle" onkeydown="checkEnter(event)">
        <p>
        <button id="shutdown">Shutdown system</button> <!-- Inserted "Shutdown system" button here -->
        <h2>Live Graph:</h2>
        <canvas id="liveChart" width="400" height="200"></canvas>
        <button id="downloadGraph">Download Graph</button>
        <button id="previous1" onclick="showMainSlide()">Previous</button>
        <button type ="button" id="next1" onclick="downloadCSV()">Download CSV </button>
    </div>

    <script>
        // Initialize the value for the pwm increment
        let currentValue = 1000;
        const valueElement = document.getElementById("pwm");

        // Function to update the displayed value
        function updateValue() {
            valueElement.textContent = currentValue;
        }

        // Event listener for key presses
        document.addEventListener("keydown", function (event) {
            if (event.key === "ArrowUp") {
                // Increase the value by 25
                currentValue += 25;
                console.log(currentValue);
                updateValue();
            } else if (event.key === "ArrowDown") {
                // Decrease the value by 25, but ensure it doesn't go below 0
                currentValue = Math.max(currentValue - 25, 0);
                console.log(currentValue);
                updateValue();
            }
        });

    </script>

<script>
function checkEnter(event) {
    // Check if the Enter key (key code 13) was pressed
    if (event.key === "Enter") {
        event.preventDefault(); // Prevent the default form submission behavior
        storeDataToCSV(); // Call the function to store the data in the CSV file
    }
}
</script>

        
        
<script>
    let dataInfo = []; // Array to store user data
    let formattedDate= new Date();

    function storeDataToCSV() {
        const user_name = document.getElementById("user_name").value; // Get user name 
        const motor_name = document.getElementById("motor_name").value; // Get Motor Name
        const prop_size = document.getElementById("prop_size").value; // Get Propeller size
        const esc_rating = document.getElementById("esc_rating").value; // Get Esc name
        const battery_id = document.getElementById("battery_id").value;// Get Battery ID
        const enter = document.getElementById("throttle_input").value; // Get the throttle value from the input field    
    // Add the data to the array
        dataInfo.push([user_name,motor_name, prop_size,esc_rating, battery_id,enter,formattedDate]);
    }
    
    function downloadCSV() {
    // Define the CSV header row
    const csvHeader = "User Name,Motor Name,Propeller Size,ESC Name,Battery ID,Throttle,Date\n";

    // Combine the header row with the data rows
    const csvContent = csvHeader + dataInfo.map(row => row.join(",")).join("\n");

    // Create a Blob object containing the CSV data
    const blob = new Blob([csvContent], { type: "text/csv" });

    // Create a URL for the Blob
    const url = URL.createObjectURL(blob);

    // Create a link element to trigger the download
    const a = document.createElement("a");
    a.href = url;
    a.download = "user_data.csv";
    
    // Append the link element to the document and trigger the download
    document.body.appendChild(a);
    a.click();

    // Clean up by revoking the Object URL
    URL.revokeObjectURL(url);

    }

    async function serialConnect() {
    try {
        // Request access to the serial port
        port = await navigator.serial.requestPort();

        // Open the serial port
        // const baudSelect = Math.abs(parseInt(document.getElementById('portSelect').value));
        await port.open({ baudRate: 57600 });

        // Create a text decoder to handle received data
        const textDecoder = new TextDecoderStream();

        // Create a readable stream from the serial port
        const readableStream = port.readable.pipeTo(textDecoder.writable);
        const reader = textDecoder.readable.getReader();

        let buffer = '';
        writer = await port.writable.getWriter();

        // Start reading data from the serial port
        while (true) {
            const { value, done } = await reader.read();
            if (done) break;

            if (value !== null && value !== undefined) {
                const receivedText = value;
                buffer += receivedText;

                // Check for newline characters
                while (buffer.includes('\n')) {
                    const newlineIndex = buffer.indexOf('\n');
                    const receivedLine = buffer.substring(0, newlineIndex);
                    buffer = buffer.substring(newlineIndex + 1);

                    console.log('Received line:', receivedLine);
                    changeText(receivedLine); // Call displayData with receivedLine
                }
            }
        }
    } catch (error) {
        console.error('Error:', error);
        alert(error);
    }
}

function displayData(receivedData) {
    // Create a container div
    const container = document.createElement('div');
    container.className = 'container';

    // Create a paragraph element to display the data
    const paragraph = document.createElement('p');
    paragraph.textContent = receivedData;

    // Append the paragraph to the container
    container.appendChild(paragraph);

    // Append the container to the body
    document.body.appendChild(container);
}

// Add an input box and a button to send data

const dataInput = document.createElement('input');
dataInput.type = 'text';
dataInput.id = 'dataInput';
dataInput.placeholder = 'Enter data and press Enter';
document.body.appendChild(dataInput);

// Function to handle Enter key press
dataInput.addEventListener('keydown', handleEnterKeyPress);

function handleEnterKeyPress(event) {
    if (event.key === 'Enter') {
        const inputData = dataInput.value;
        // Call your function with the entered data
        sendToDataArduino(inputData);
        dataInput.value = ''; // Clear the input field
    }
}

async function sendToDataArduino(value) {
    try {
        // Ensure that the port is open
        if (!port) {
            console.error('Serial port not open.');
            return;
        }

        // Convert the value to an ArrayBuffer
        const encoder = new TextEncoder();
        const dataToSend = encoder.encode(value + '\n'); // Convert string to Uint8Array

        // Write the data to the serial port
        await writer.write(dataToSend);
        console.log('Sent to Arduino:', value);
    } catch (error) {
        console.error('Error:', error);
        alert(error);
    }
}


// Function to send slider value to Arduino
function sendSliderValue(value) {
    // Send the slider value to the Arduino
    sendToDataArduino(value);
}

// Function to update the slider value and display it
function updateSliderValue(value) {
    const displayValue = document.getElementById('displayValue');
    displayValue.textContent = value;

    // Send the slider value to Arduino when the slider is moved
    sendSliderValue(value);
    }



</script>
<script>
    // Your JavaScript code here
    function showMainSlide() {
        document.getElementById("slide1").style.display = "block";
        document.getElementById("manualSlide").style.display = "none";
        document.getElementById("autoSlide").style.display = "none";
    }

    function showManualSlide() {
        document.getElementById("slide1").style.display = "none";
        document.getElementById("manualSlide").style.display = "block";
        document.getElementById("autoSlide").style.display = "none";
    }

    function showAutoSlide() {
        document.getElementById("slide1").style.display = "none";
        document.getElementById("manualSlide").style.display = "none";
        document.getElementById("autoSlide").style.display = "block";
    }
</script>
    
<script>
        const userForm = document.getElementById('userForm');
        const slides = document.querySelectorAll('.slide');
        const chartCanvas = document.getElementById('liveChart').getContext('2d');
        let data = [];
        let labels = [];

        function showSlide(slideIndex) {
            slides.forEach((slide, index) => {
                if (index === slideIndex - 1) {
                    slide.style.display = 'block';
                } else {
                    slide.style.display = 'none';
                }
            });
        }

        function updateValue(value) {
            document.getElementById('displayValue').textContent = value;
        }

        function updateLiveChart() {
            new Chart(chartCanvas, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Values',
                            data: data,
                            backgroundColor: ['blue', 'green'],
                        },
                    ],
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                        },
                    },
                },
            });
        }

        // Next and Previous buttons
        const next1Button = document.getElementById('next1');
        const next2Button = document.getElementById('next2');
        const previous1Button = document.getElementById('previous1');

        next1Button.addEventListener('click', function (e) {
            e.preventDefault();
            showSlide(2);
        });

        next2Button.addEventListener('click', function (e) {
            e.preventDefault();
            showSlide(1);
        });

        previous1Button.addEventListener('click', function (e) {
            e.preventDefault();
            showSlide(1);
        });

        // Calibrate button functionality
        const calibrateButton = document.getElementById('calibrate');
        calibrateButton.addEventListener('click', function () {
            // Add your calibrate functionality here
        });

        // Shutdown button functionality
        const shutdownButton = document.getElementById('shutdown');
        shutdownButton.addEventListener('click', function () {
            // Add your shutdown system functionality here
        });
        // Function to download the graph as a JPEG image
    function downloadGraph() {
        const canvas = document.getElementById('liveChart');
        const dataURL = canvas.toDataURL('image/jpeg');
        const a = document.createElement('a');
        a.href = dataURL;
        a.download = 'graph.jpg';
        a.click();
    }

    function changeText(newText) {
    var paragraph = document.getElementById("dynamic-paragraph");
    
    if (newText) {
        paragraph.textContent = newText;
    } else {
        paragraph.textContent = "This is a dynamic text paragraph.";
    }
}


    // Attach a click event handler to the "Download Graph" button
    const downloadGraphButton = document.getElementById('downloadGraph');
    downloadGraphButton.addEventListener('click', downloadGraph);
</script>
</body>
</html>
